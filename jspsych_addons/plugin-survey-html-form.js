var jsPsychSurveyHtmlForm = (function (jspsych) {
  'use strict';

  const info = {
      name: "survey-html-form",
      parameters: {
        /** Array containing one or more objects with parameters for the question(s) that should be shown on the page. */
          survey_json: {
              type: jspsych.ParameterType.JSON,              
              pretty_name: "Questions",
             
          },
          /** HTML formatted string containing all the input elements to display. Every element has to have its own distinctive name attribute. The <form> tag must not be included and is generated by the plugin. */
          html: {
              type: jspsych.ParameterType.HTML_STRING,
              pretty_name: "HTML",
              default: null,
          },
          /** HTML formatted string to display at the top of the page above all the questions. */
          preamble: {
              type: jspsych.ParameterType.HTML_STRING,
              pretty_name: "Preamble",
              default: null,
          },
          /** Label of the button to submit responses. */
          button_label: {
              type: jspsych.ParameterType.STRING,
              pretty_name: "Button label",
              default: "Continue",
          },
          /** Label on the popup when a question is missed. */
          missed_question_label: {
              type: jspsych.ParameterType.STRING,
              pretty_name: "Valid check",
              default: "Please select an item",
          },
          /** Label next to submit button when a question is missed. */
          missed_question_text: {
              type: jspsych.ParameterType.STRING,
              pretty_name: "Valid check",
              default: "Please answer all questions",
          },

          /** The HTML element ID of a form field to autofocus on. */
          autofocus: {
              type: jspsych.ParameterType.STRING,
              pretty_name: "Element ID to focus",
              default: "",
          },
          /** Retrieve the data as an array e.g. [{name: "INPUT_NAME", value: "INPUT_VALUE"}, ...] instead of an object e.g. {INPUT_NAME: INPUT_VALUE, ...}. */
          dataAsArray: {
              type: jspsych.ParameterType.BOOL,
              pretty_name: "Data As Array",
              default: false,
          },
          /** Setting this to true will enable browser auto-complete or auto-fill for the form. */
          autocomplete: {
              type: jspsych.ParameterType.BOOL,
              pretty_name: "Allow autocomplete",
              default: false,
          },
      },
  };
  /**
   * **survey-html-form**
   *
   * jsPsych plugin for displaying free HTML forms and collecting responses from all input elements
   *
   * @author Jan Simson
   * @see {@link https://www.jspsych.org/plugins/jspsych-survey-html-form/ survey-html-form plugin documentation on jspsych.org}
   */
  class SurveyHtmlFormPlugin {
      constructor(jsPsych) {
          this.jsPsych = jsPsych;
      }
        
      CheckAllForAnyVisibleIf(trial) {
        console.log(trial)
        var NQuestions = trial.survey_json.pages[0].elements.length
        for ( var i = 0; i < NQuestions; i++ ) {
            console.log(trial.survey_json.pages[0].elements[i].visibleIf)
        }
        }
        

      trial(display_element, trial) {

          var html = "";
          // show preamble text
          if (trial.preamble !== null) {
              html +=
                  '<div id="jspsych-survey-html-form-preamble" class="jspsych-survey-html-form-preamble">' +
                      trial.preamble +
                      "</div>";
          }
          // start form
          if (trial.autocomplete) {
              html += '<form id="jspsych-survey-html-form">';
          }
          else {
              html += '<form id="jspsych-survey-html-form" autocomplete="off">';
          }
          
          // add form HTML / input elements
          // cycle over the JSON input data
          console.log(trial.survey_json)
          var NQuestions = trial.survey_json.pages[0].elements.length
          console.log("There are "+NQuestions+" questions")
          
          // Look for visible if questions and create the text to hide them
          var VisibleIfConditions = []
          var AllQuestionsValid

          for ( var i = 0; i < NQuestions; i++ ) {
            var thisQ = {}
            var thisQuestion = trial.survey_json.pages[0].elements[i]
            if ( thisQuestion.visibleIf ) {
                // https://stackoverflow.com/questions/29830628/how-to-regex-after-equal-sign
                var ConditionToMeet = thisQuestion.visibleIf.split("==")[1]
                
                var Str = 'style="display: none"'
                thisQ['div'] = Str
                thisQ['name'] = thisQuestion.name
                // decode the visible if condition
                var matches = thisQuestion.visibleIf.match(/\{(.*?)\}/);
                var ThisQuestionIsConditionalOn = matches[1]
                console.log(ThisQuestionIsConditionalOn)
                // thisQuestion.name is VISIBLE if  ThisQuestionIsConditionalOn is changed to be ConditionToMeet
                // Find this question and edit it
                let obj = VisibleIfConditions.find((o, index) => 
                    {
                        if (o.name === ThisQuestionIsConditionalOn) {
                            console.log("INEDX: "+index)
                            // Now that we found the question that the current question is conditional ON
                            // we need to find what the condition is. If that condition is met, then make the
                            // set the onChange function to make this question visible.
                            // This could look like onChange(this, "the selected value to define the condition is met", the Question ID to make visible)
                            VisibleIfConditions[index]['onChangeQuestion'] = thisQuestion.name
                            VisibleIfConditions[index]['onChangeCondition'] = ConditionToMeet.trim()
                            return true;
                        }
                    })

            } 
            else {
                var Str = 'style="display: visible"'
                thisQ['div'] = Str
                thisQ['name'] = thisQuestion.name
            }
            VisibleIfConditions.push(thisQ)
          }
          console.log(VisibleIfConditions)
          //console.log(obj)
          console.log(html)
          // reset the Str variable to be empty
          Str = ''
          // If there are overall instructions, add them.
          
          if (Object.hasOwn(trial.survey_json,'Instructions')) {
            Str += '<div class="surveyFormInstructions">'+trial.survey_json.Instructions+'</div>'
          }
          Str += '<hr>'
          for ( var i = 0; i < NQuestions; i++ ) {
            var thisQuestion = trial.survey_json.pages[0].elements[i]
            // process dropdown questions

            switch(thisQuestion.type) {
                case 'dropdown':
                    console.log("========= DROPDOWN QUESTION ==========")
                    // console.log("Question type: "+thisQuestion.visibleIf)

                    Str += '<div class="surveyFormDiv" id="div-'+thisQuestion.name+'" '+VisibleIfConditions[i].div+'>'
                    Str += '<label class="surveyFormLabel">'+thisQuestion.title+'</label><p>'

                    Str += '<select class="surveyFormSelect"'
                    if ( VisibleIfConditions[i].onChangeCondition ) {
                        Str += 'onChange="ModifyOnChange(\''+thisQuestion.name+'___'+VisibleIfConditions[i].onChangeQuestion+'___'+VisibleIfConditions[i].onChangeCondition+'\')" '
                        //Str += 'onChange="ModifyOnChange(this)"'
                        //var JJJ = "JASON"
                        //Str += 'onChange="ModifyOnChange(\'JJJ\')" '                        
                    }
                    // only set the visible questions to be required
                    if ( ! thisQuestion.visibleIf ) {
                        Str += ' required '
                    }

                    Str += '"name="'+thisQuestion.name+'" id="'+thisQuestion.name+'" '
                    
                    Str += 'oninvalid="this.setCustomValidity(\''+ trial.missed_question_label +'\')"'
                    Str += '>'
                    // <select required  id="doc_type" oninvalid="this.setCustomValidity('Please select an item in the list')" oninput="setCustomValidity('')">

                    //Str += '<select TagName="'+thisQuestion.visibleIf+'" onChange="ModifyOnChange(this)" name="'+thisQuestion.name+'" id="'+thisQuestion.name+'">'
                    //Str += '<select onChange="testFunction()" name="'+thisQuestion.name+'" id="'+thisQuestion.name+'">'
                    var NChoices = thisQuestion.choices.length
                    // add default/blank option
                     Str += '<option disabled selected value> -- </option>'
                    for ( var j = 0; j < NChoices; j++ ) {
                        //console.log("The choices are: "+thisQuestion.choices[j])
                        Str += '<option value="'+thisQuestion.choices[j].value+'">'+thisQuestion.choices[j].text+'</option>'
                    }
                    Str += '</select></div><hr>'
                    // after the element is made check to see if there is a visible If property and adjust the target question
                    
                    //console.log(Str)
                    break;
                
                case 'radiogroup':
                    console.log("========= RADIO GROUP QUESTION ==========") 
                    
                    
                    Str += '<div class="surveyFormDiv surveryFormRadioGroup" id="div-'+thisQuestion.name+'">'
                    Str += '<label class="surveyFormLabel">'+thisQuestion.title+'</label>'
                    Str += '<div class="radiogroup_alignment">'
                    var NChoices = thisQuestion.choices.length
                    for ( var j = 0; j < NChoices; j++ )
                    {
                     Str += '<input type="radio"  class="sd-item__decorator radiogroup" id="'+thisQuestion.name+'" name="'+thisQuestion.name+'" value="'+thisQuestion.choices[j].value +'" '
                     Str += 'oninvalid="this.setCustomValidity(\''+ trial.missed_question_label +'\')"'
                     Str += '>' 
                     Str += '<label for="thisQuestion.name'+'_'+j+'" class="surveyFormResponseLabel">' + thisQuestion.choices[j].text+'</label></br>'
                    }
                    Str += '</div></div><hr>'
                    break;
                default:
                    console.log("========= DEFAULT ==========")
                        console.error("Questions of type "+trial.survey_json.pages[0].elements[i].type+" are not availble")
            }

          }
          html += Str

          // add submit button
            html += '<div class="tableSubmitButton">'
            html +=
              '<table border="0"><tr><td colspan="2"><input type="submit" id="jspsych-survey-matrix-next" onClick="InternalValidateForm(this.form)" class="jspsych-survey-matrix jspsych-btn submit-btn" value="' +
                trial.button_label +
                ' "></input>';
            html += "</form></td><td colspan='3' class='item_label' id='tableMessageBox' style='display: none'>"+trial.missed_question_text+"</td></tr></table>";

          
          html += "</form>";
          
          display_element.innerHTML = html;
          if (trial.autofocus !== "") {
              var focus_elements = display_element.querySelectorAll("#" + trial.autofocus);
              if (focus_elements.length === 0) {
                  console.warn("No element found with id: " + trial.autofocus);
              }
              else if (focus_elements.length > 1) {
                  console.warn('The id "' + trial.autofocus + '" is not unique so autofocus will not work.');
              }
              else {
                  focus_elements[0].focus();
              }
          }
          display_element
              .querySelector("#jspsych-survey-html-form")
              .addEventListener("submit", (event) => {
                console.log("Have all questions been answered? " + AllQuestionsValid)
              // don't submit form
              event.preventDefault();
              // measure response time
              var endTime = performance.now();
              var response_time = Math.round(endTime - startTime);
              var this_form = display_element.querySelector("#jspsych-survey-html-form");
              // get response data
              // Need each questions 
              //    id
              //    label innerHTML
              //    selection innerHTML(text)
              //    selection value
              
              // get all the div elements that contain the questions
                var AllQuestions = document.getElementsByClassName("surveyFormDiv")
                var NQuestions = AllQuestions.length

                // Initialize the object for holding the resultant data
                var question_data = []    
                for ( var i = 0; i < NQuestions; i++ ) {
                    if ( AllQuestions[i].getElementsByClassName("surveyFormSelect").length > 0 )
                    { // THIS IS A MATRIX QUESTION 
                        var selectedIndex = AllQuestions[i].getElementsByClassName("surveyFormSelect")[0].selectedIndex
                        var this_question_data = {}
                        this_question_data.name = AllQuestions[i].getElementsByClassName("surveyFormSelect")[0].id
                        this_question_data.label = AllQuestions[i].getElementsByClassName("surveyFormLabel")[0].innerText
                        this_question_data.responseValue = Number(AllQuestions[i].getElementsByClassName("surveyFormSelect")[0].options[selectedIndex].value)
                        this_question_data.responseText = AllQuestions[i].getElementsByClassName("surveyFormSelect")[0].options[selectedIndex].innerText
                        question_data.push(this_question_data)
                    }
                    else if ( AllQuestions[i].getElementsByClassName("radiogroup").length )
                    { // THIS IS A RADIO GROUP QUESTION 
                        var this_question_data = {}
                        var CurrentQuestionName = AllQuestions[i].getElementsByClassName("radiogroup")[0].name
                        var rates = document.getElementsByName(CurrentQuestionName)
                        for ( var k = 0; k < rates.length; k++ )
                        { 
                            if ( rates[k].checked ) 
                                {
                                    if (rates[k].checked)
                                        { 
                                            this_question_data.responseText = AllQuestions[i].getElementsByClassName("surveyFormResponseLabel")[k].innerText
                                        }
                                    }
                                }
                        this_question_data.name = CurrentQuestionName
                        this_question_data.responseValue = Number(document.querySelector('input[name="'+CurrentQuestionName+'"]:checked').value)
                        this_question_data.label = AllQuestions[i].getElementsByClassName("surveyFormLabel")[0].innerText
                        question_data.push(this_question_data)
                    }
                }
              
              // save data
              var trialdata = {
                  rt: response_time,
                  response: question_data,
              };
              console.log(trialdata)
              display_element.innerHTML = "";






              // next trial
              this.jsPsych.finishTrial(trialdata);
          });
          var startTime = performance.now();

      
      }
  }
  SurveyHtmlFormPlugin.info = info;

  return SurveyHtmlFormPlugin;

})(jsPsychModule);


// if a visibleIf question is found when looping over the JSON          
// then change the functionaility of the question or the onChange function

// https://stackoverflow.com/questions/29321494/show-input-field-only-if-a-specific-option-is-selected
function ModifyOnChange(elementToChange) {
    var splitInput = elementToChange.split('___')
    //get current question
    var e = document.getElementById(splitInput[0])
    // The values provided for each option should be arbitray form the code's point of view
    // what is the option index for the selected option?
    if (e.options[e.options.selectedIndex].innerHTML == splitInput[2]) {
        f = document.getElementById("div-"+splitInput[1])
        f.style="display: visible"
        s = document.getElementById("div-"+splitInput[1]).getElementsByClassName("surveyFormSelect")[0]
        
        //f.setAttribute('required','')
        s.required = true;
        console.log(s)
    }
}

function InternalValidateForm(form) {
    // Add a variable to determine if all questions are answered
    AllQuestionsValid = true

    var AllQuestions = document.getElementsByClassName("surveyFormDiv")
    var NQuestions = AllQuestions.length
    //console.log(document.querySelector('input[name="loneliness002"]:checked').value)
    for ( var i = 0; i < NQuestions; i++ ) {
        // get the name of each question
        if ( AllQuestions[i].getElementsByClassName("surveyFormSelect").length > 0 )
        { // THIS IS A MATRIX QUESTION 
             //console.log(AllQuestions[i].style.display != 'none')
            //console.log(AllQuestions[i].getElementsByClassName("surveyFormSelect")[0].selectedIndex)
            // Add check to see if a question is visible or not before deciding if it needs to be answered.

            if ( AllQuestions[i].getElementsByClassName("surveyFormSelect")[0].selectedIndex == 0 ) {
                AllQuestionsValid = false
                if ( AllQuestions[i].style.display != 'none' ) {
                    document.getElementById("div-"+AllQuestions[i].getElementsByClassName("surveyFormSelect")[0].id).style.backgroundColor = '#FFC0CB'
                    document.getElementById("tableMessageBox").style = "block"
                    document.getElementById("tableMessageBox").style.backgroundColor = '#FFC0CB' 
                }
            }
            else { // reset the background color
                document.getElementById("div-"+AllQuestions[i].getElementsByClassName("surveyFormSelect")[0].id).style.backgroundColor = '#FFF'
            }
        }


        else if ( AllQuestions[i].getElementsByClassName("radiogroup").length )
        {
            // THIS IS A RADIO GROUP QUESTION 
            document.getElementById("tableMessageBox").style.backgroundColor = "#FFF"
            var CurrentQuestionName = AllQuestions[i].getElementsByClassName("radiogroup")[0].name
            //console.log(CurrentQuestionName+": "+document.querySelector('input[name="'+CurrentQuestionName+'"]:checked').value)
            if (document.querySelector('input[name="'+CurrentQuestionName+'"]:checked'))
            {
                document.getElementById("div-"+CurrentQuestionName).style.backgroundColor = '#FFF'
            }
            else {
                AllQuestionsValid = false
                // what os the DIV element for this question?
                document.getElementById("div-"+CurrentQuestionName).style.backgroundColor = '#FFC0CB'
                document.getElementById("tableMessageBox").style = "block"
                document.getElementById("tableMessageBox").style.backgroundColor = '#FFC0CB' 
            }
        }
    }

    /* for ( var i = 0; i < NQuestions; i++ ) {
        //console.log(AllQuestions[i].style.display != 'none')
        //console.log(AllQuestions[i].getElementsByClassName("surveyFormSelect")[0].selectedIndex)
        // Add check to see if a question is visible or not before deciding if it needs to be answered.
        console.log(AllQuestions[i].getElementsByClassName("surveyFormSelect"))
        console.log(AllQuestions[i].getElementsByClassName("surveryFormRadioGroup"))

        if ( AllQuestions[i].getElementsByClassName("surveyFormSelect")[0].selectedIndex == 0 ) {
            if ( AllQuestions[i].style.display != 'none' ) {
                document.getElementById("div-"+AllQuestions[i].getElementsByClassName("surveyFormSelect")[0].id).style.backgroundColor = '#FFC0CB'
                document.getElementById("tableMessageBox").style = "block"
                document.getElementById("tableMessageBox").style.backgroundColor = '#FFC0CB' 
            }
        }
        else { // reset the background color
            document.getElementById("div-"+AllQuestions[i].getElementsByClassName("surveyFormSelect")[0].id).style.backgroundColor = '#FFF'
        }
        console.log(AllQuestions[i].getElementsByClassName("surveyFormSelect")[0].id)
        console.log(AllQuestions[i])
    }*/

}